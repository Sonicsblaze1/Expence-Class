# -*- coding: utf-8 -*-
"""Expence_Class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Zmh1u8JJptSNu0wyE4JJu1tJKS3N3Hg
"""

import uuid
from datetime import datetime

class Expense:
    def __init__(self, title: str, amount: float):
        """Initializes an expense with a unique ID, title, amount, and timestamps."""
        self.id = str(uuid.uuid4())  # Generates a unique identifier
        self.title = title  # Stores the title of the expense
        self.amount = amount  # Stores the amount of the expense
        self.time_created = datetime.utcnow()  # Sets creation timestamp in UTC
        self.time_updated = self.time_created  # Initializes time_updated with time_created

    def update(self, title: str = None, amount: float = None):
        """Updates the title and/or amount of the expense and refreshes time_updated."""
        if title:
            self.title = title  # Updates title if provided
        if amount:
            self.amount = amount  # Updates amount if provided
        self.time_updated = datetime.utcnow()  # Updates modification timestamp

    def to_dict(self):
        """Returns a dictionary representation of the expense."""
        return {
            "id": self.id,
            "title": self.title,
            "amount": self.amount,
            "time_created": self.time_created.isoformat(),
            "time_updated": self.time_updated.isoformat(),
        }

class ExpenseDatabase:
    def __init__(self):
        """Initializes an empty list to store expenses."""
        self.expense_list = []

    def add_expense(self, expense: Expense):
        """Adds an expense to the database."""
        self.expense_list.append(expense)

    def remove_expense(self, expense_id: str):
        """Removes an expense by filtering out the one with the given ID."""
        self.expense_list = [expense for expense in self.expense_list if expense.id != expense_id]

    def get_expense_by_id(self, expense_id: str):
        """Finds and returns an expense by its unique ID."""
        for expense in self.expense_list:
            if expense.id == expense_id:
                return expense
        return None

    def get_expense_by_title(self, title: str):
        """Returns a list of expenses matching the given title."""
        return [expense for expense in self.expense_list if expense.title.lower() == title.lower()]

    def to_dict(self):
        """Returns a list of all expenses as dictionaries."""
        return [expense.to_dict() for expense in self.expense_list]

# Example Usage
if __name__ == "__main__":
    db = ExpenseDatabase()
    
    expense1 = Expense("Groceries", 50.75)
    expense2 = Expense("Transport", 20.00)
    expense3 = Expense("Electricity Bill", 100.00)
    expense4 = Expense("Internet Subscription", 45.50)
    expense5 = Expense("Dining Out", 30.25)
    
    db.add_expense(expense1)
    db.add_expense(expense2)
    db.add_expense(expense3)
    db.add_expense(expense4)
    db.add_expense(expense5)
    
    print("All Expenses:")
    print(db.to_dict())
    
    print("\nRetrieving expense by ID:")
    retrieved_expense = db.get_expense_by_id(expense3.id)
    if retrieved_expense:
        print(retrieved_expense.to_dict())
    
    print("\nRetrieving expenses by title (Transport):")
    print([exp.to_dict() for exp in db.get_expense_by_title("Transport")])
    
    print("\nUpdating an expense (Groceries)")
    expense1.update(amount=55.00)
    print(expense1.to_dict())
    
    print("\nRemoving an expense (Dining Out)")
    db.remove_expense(expense5.id)
    print(db.to_dict())

"""# Expense Tracker

This project is a simple Expense Tracker implemented in Python using Object-Oriented Programming (OOP). It consists of two main classes:

- `Expense`: Represents an individual financial expense with attributes like `id`, `title`, `amount`, `created_at`, and `updated_at`.
- `ExpenseDatabase`: Manages a collection of expenses, allowing adding, removing, and retrieving expenses by ID or title.

