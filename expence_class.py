# -*- coding: utf-8 -*-
"""Expence_Class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Zmh1u8JJptSNu0wyE4JJu1tJKS3N3Hg
"""

import uuid
from datetime import datetime

class Expense:
    def __init__(self, title: str, amount: float):
        self.id = str(uuid.uuid4())  # Generate unique UUID
        self.title = title
        self.amount = amount
        self.created_at = datetime.utcnow()  # Store in UTC
        self.updated_at = self.created_at

    def update(self, title: str = None, amount: float = None):
        if title:
            self.title = title
        if amount:
            self.amount = amount
        self.updated_at = datetime.utcnow()

    def to_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "amount": self.amount,
            "created_at": self.created_at.isoformat(),
            "updated_at": self.updated_at.isoformat()
        }

class ExpenseDatabase:
    def __init__(self):
        self.expenses = []

    def add_expense(self, expense: Expense):
        self.expenses.append(expense)

    def remove_expense(self, expense_id: str):
        self.expenses = [exp for exp in self.expenses if exp.id != expense_id]

    def get_expense_by_id(self, expense_id: str):
        for exp in self.expenses:
            if exp.id == expense_id:
                return exp
        return None

    def get_expense_by_title(self, title: str):
        return [exp for exp in self.expenses if exp.title.lower() == title.lower()]

    def to_dict(self):
        return [expense.to_dict() for expense in self.expenses]

# Example Usage
if __name__ == "__main__":
    db = ExpenseDatabase()
    expense1 = Expense("Groceries", 50.75)
    expense2 = Expense("Transport", 15.00)

    db.add_expense(expense1)
    db.add_expense(expense2)

    print(db.to_dict())  # Show all expenses

"""# Expense Tracker

This project is a simple Expense Tracker implemented in Python using Object-Oriented Programming (OOP). It consists of two main classes:

- `Expense`: Represents an individual financial expense with attributes like `id`, `title`, `amount`, `created_at`, and `updated_at`.
- `ExpenseDatabase`: Manages a collection of expenses, allowing adding, removing, and retrieving expenses by ID or title.

## How to Clone the Repository
To clone this repository, use the following command:

```sh
git clone <repository-url>
```

Replace `<repository-url>` with the actual URL of the GitHub repository.

## How to Run the Code
After cloning the repository, navigate into the project directory:

```sh
cd expense-tracker
```

Then, run the script using Python:

```sh
python expense_tracker.py
```

This will execute the example usage provided in the script and display the list of expenses in JSON format.


"""

